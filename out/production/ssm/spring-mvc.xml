<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-4.3.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
    http://www.springframework.org/schema/data/jpa
    http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd">

	<!--1.开启springMVC注解  -->
	<mvc:annotation-driven/>
	
	<!--2.开启包扫描 controller  -->
	<context:component-scan base-package="com.ssm"></context:component-scan>
	
	<!-- 配置根视图 --> 
	<!-- <mvc:view-controller path="/" view-name="index" /> -->
	<!-- 静态资源配置 -->
	<!-- <mvc:resources location="/assets/" mapping="/assets/**"></mvc:resources> -->

	<!--3.配置视图解析器 内部资源视图解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/pages/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- .do是为了兼容Struts用法，springmvc中不是必须的，可以让请求方法名直接对应controller中方法，这样web.xml中配置url-mapping:/,处理所有请求。
	如果是前后端分离，静态页面会被拦截，所以要配置此项 -->
	<!--放行静态资源文件 ，在这里放行静态资源（css,js,image,html等文件，在web.xml中不用配置/*.do的处理请求，这样保证请求方法中不用加后缀）-->
	<mvc:default-servlet-handler/>
	
	<!--添加文件上传视图解析器
		注意事项:id的名称必须为multipartResolver
	  -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="4096000000"></property>
		<property name="maxInMemorySize" value="1024000"></property>
	</bean>
	
	<!-- 配置 拦截器-->
	<!-- 通过在表单增加token，然后在拦截器中获取token，比较前后token是否是同一个来确定表单是否是重复提交 -->
	<!-- <input type="hidden" name="token" value="${token}" /> -->
	<!-- <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.spring.interceptor.TokenInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors> -->
	
	<!-- 请求拦截器，记录controller请求信息 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.ssm.common.interceptor.RequestLogInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- application context. 配置datasource, mybatis, 事务，shiro完全，切面等。可以单独提到一个xml文件中。 -->
	
	<!-- 启用AOP注解(自动为目标对象创建代理对象) -->
	<aop:aspectj-autoproxy />

	<!-- 整合druid -->
	<util:properties id="cfg"
		location="classpath:config.properties"></util:properties>
	<!--配置DruidDataSource连接池 -->
	<!-- 连接池一般不延迟加载，Tomcat启动就加载 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"
		init-method="init" lazy-init="false">
		<property name="driverClassName" value="#{cfg.driver}" />
		<property name="url" value="#{cfg.url}" />
		<property name="username" value="#{cfg.username}" />
		<property name="password" value="#{cfg.password}" />
	</bean>

	<!-- 整合mybatis -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:mybatis-config.xml"></property>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations"
			value="classpath:mapper/*.xml">
			<!-- <list> <value>classpath:mapper/*.xml</value> </list> -->
		</property>
	</bean>

	<!-- 扫描DAO接口所在包，Spring会自动查找其下的dao 接口，然后为接口创建代理对象 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ssm.dao" /><!--com.ssm.**.dao 中的**表示：ssm下的包以及子包 -->
		<property name="SqlSessionFactoryBeanName"
			value="sqlSessionFactory"></property>
			<!-- 也可以省略，spring自动装配 -->
	</bean>
	
	

	<!-- 配置spring事务管理 -->
	<!--1)定义事务管理对象(可以将此对象理解为切面) -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 2)配置事务策略 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" isolation="READ_COMMITTED" />
			<!-- read-only="true" 加入之后，在查询方法上记录日志会出错. 在查询事务中又有插入事务，导致出现异常，属于事务的传播特性。 会抛Connection 
				is read-only. Queries leading to data modification are not allowed.异常 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="valid*" propagation="REQUIRED" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<!-- 3)配置事务应用(在哪些业务对象的哪些方法上使用事务) -->
	<aop:config>
		<aop:pointcut
			expression="execution(* com.ssm.service..*.*(..))" id="txPointcut" />
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="txPointcut" />
	</aop:config>
	
</beans>