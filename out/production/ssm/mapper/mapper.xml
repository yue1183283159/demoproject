<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.dao.BlogMapper">
	<!-- myBatis解析mapper文件，会生产MapperStatement对象，将name，parameter type，result type，SQL等封装起来，不同类型调用不同的方法。  -->
	<!-- sql中有换行，有空格，这些都会经过网络发送到mysql的数据库进行查询，所以去掉多余的空格和换行符，可以作为优化性能的一个点。 -->

	<!-- 对于参数是model，#{xxx}对应的是model的属性名，如果有getXxx方法，则调用get方法取值；如果没有提供getXxx方法，则利用反射取值。
	对于早期的版本，没有对应的get方法，会报错。
	 -->
	<insert id="saveBlog" parameterType="Blog"
		useGeneratedKeys="true" keyProperty="id">
		<!-- selectKey after, 执行完插入的sql之后，获取last insert id赋值给blog的id属性。-->
		<!-- <selectKey keyProperty="id" order="AFTER" resultType="int">
			select last_insert_id();
		</selectKey> -->
		insert into
		blog(title,brief,author,content,read_count,href,addon)
		values(#{title},#{brief},#{author},#{content},#{readCount},#{href},now())
	</insert>
	
	<!-- 批处理的插入怎么做？ -->
	<insert id="batchSaveBlogs" parameterType="Blog"
		useGeneratedKeys="true" keyProperty="id">
		insert into
		blog(title,brief,author,content,read_count,href,addon)
		values
		<foreach collection="blogs"  separator="," item="blog">
			(#{blog.title},#{blog.brief},#{blog.author},#{blog.content},#{blog.readCount},#{blog.href},now())
		</foreach>		
	</insert>

	<!-- 参数是array数组，则获取参数使用array[index] -->
	<update id="updateBlogContentByArray">
		update blog set content=#{array[0]} where id=#{array[1]}
	</update>
	
	<!-- 参数是map，则获取参数是名字是map的key -->
	<update id="updateBlogContentByMap">
		update blog set content=#{content} where id=#{id}
	</update>
	
	<!-- 如果只有一个参数，既可以指定参数类型，也可以不知道参数类型。 -->
	<delete id="deleteBlog" parameterType="int">
		delete from blog where id=#{id}
	</delete>
	
	<!-- 不确定条件值个数的时候，使用动态SQL -->
	<delete id="deleteBlogs">
		delete from blog where id in <!-- (1,2,...) -->
		<foreach collection="ids" open="(" close=")" separator="," item="id">
			#{id}
		</foreach>
	</delete>

	<!--表中每一行映射为一个blog对象 -->
	<!--数据库表中read_count字段不能映射到Blog model的readCount属性上，因为默认是按属性名匹配映射的。 如果要进行字段名和不同的属性名进行映射，需要定义ResultMap -->
	<resultMap type="com.ssm.pojo.Blog" id="blogMapper">
		<id property="id" column="id" />
		<result property="title" column="title" />
		<result property="brief" column="brief" />
		<result property="author" column="author" />
		<result property="content" column="content" />
		<result property="href" column="href" />
		<result property="readCount" column="read_count" />
		<result property="flagDelete" column="flag_delete" />
	</resultMap>
	
	<!-- 对于查询，要把查询字段名写出来，尽量避免少写*查询所有的列，要根据实际需要输出列，减少网络传输的字节量。同时也增加了可读性。 -->
	<select id="findAllBlogEx" resultType="Blog">
		select * from blog where
		flag_delete=0
	</select>
	
	<!-- sql被封装到了BoundSql对象中 。 如果要在运行时给SQL增加一些内容，比如：增加条件。这个需要在运行时拿到BoundSql对象，给封装的SQL增加内容，然后再执行SQL -->
	<select id="findAllBlog" resultMap="blogMapper">
		select * from blog where
		flag_delete=0
	</select>
	
	<!-- 使用${}可以直接取值拼接SQL，但是会存在sql注入的风险，如果${}不使用在where，having等后面，就不会有注入风险。所以一般${}值是列名，表名。 -->
	<!-- 此处使用#{}则不能按照排序结果输出， -->
	<select id="findSortedBlog" resultMap="blogMapper">
		 select * from blog where id>#{condition} order by ${columnName} ${orderType}
		 <!-- select * from blog order by #{columnName} #{orderType} -->
	</select>
</mapper>