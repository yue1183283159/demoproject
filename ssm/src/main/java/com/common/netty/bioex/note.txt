伪异步I/O模型。采用线程池和任务队列可以实现一种叫作伪异步的I/O通信框架。
当有新的客户端接入时，将客户端的socket封装成一个Task（实现Runnable接口）投递到后端的线程池中进行处理。
JDK的线程池维护一个消息队列和N个活跃线程，对消息队列中的任务进行处理。
由于线程池可以设置消息队列的大小和最大线程数，因此，资源占用是可控的，无论多少个客户端并发访问，都不导致资源的耗尽和宕机

弊端：
I/O操作都是同步阻塞的，阻塞的时间取决于对方I/O线程的处理速度和网络I/O的传输速度。
如果应用程序依赖对方的处理速度，它的可靠性就非常差。
伪异步I/O仅仅是对之前的I/O线程模型的一个简单优化，无法从根本上解决同步I/O导致的通信线程阻塞问题。