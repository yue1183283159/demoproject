<?xml version="1.0" encoding="UTF-8"?>
<!--default-lazy-init全局延迟加载配置，false表示xml中所有bean延迟加载。只有在使用的时候才创建，优化资源应用 -->
<beans default-lazy-init="false"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-4.3.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
    http://www.springframework.org/schema/data/jpa
    http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd">

	<bean id="openDataSource" class="com.spring.ioc.OpenDataSource"
		init-method="init" destroy-method="close" lazy-init="false" scope="prototype">
		<!-- lazy-init 设置是否开启延迟加载，false立即加载，在xml解析的时候创建对象，true是开启延迟加载，只有在使用对象的时候才创建 -->
		<!-- singleton单例，prototype多例，需要每次使用对象时，对象不同，则使用多例 -->
		<!-- 构造函数注入，有一个参数的构造函数，需要一个constructor-arg -->
		<constructor-arg value="10"></constructor-arg>
		<!-- set注入 -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/test" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>


	<!-- 整合druid对象（定义并配置这个bean对象，借助bean标签描述bean对象） -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- property元素告诉spring，通过set方法为属性赋值 -->
		<property name="DriverClassName" value="com.mysql.jdbc.Driver" />
		<property name="Url" value="jdbc:mysql://localhost:3306/test" />
		<property name="Username" value="root" />
		<property name="Password" value="root" />
	</bean>

	<!-- property name的首字母大小写不区分，后面的字母大小写是区分的 -->
	<bean id="container" class="com.spring.ioc.Container">
		<property name="list">
			<list><!-- ArrayList -->
				<value>text/html</value>
				<value>application/json</value>
			</list>
		</property>
		<property name="map">
			<map><!-- LinkedHashMap -->
				<entry key="encode" value="utf-8"></entry>
				<entry key="port" value="8888"></entry>
			</map>
		</property>
		<property name="properties">
			<props>
				<prop key="url">jdbc:mysql://127.0.0.1:3306/test</prop>
				<prop key="username">root</prop>
			</props>
		</property>

	</bean>

	<!-- 生产者消费者模式 ,不同的注入场景，对象创建先后顺序不同。-->
	<bean id="mcontainer" class="com.spring.ioc.MContainer"></bean>
	<bean id="mproducer" class="com.spring.ioc.MProducer">
		<property name="container" ref="mcontainer"></property>
	</bean>
	<bean id="mconsumer" class="com.spring.ioc.MConsumer">
		<constructor-arg ref="mcontainer"></constructor-arg>
	</bean>

</beans>